// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repo/price-repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPriceGetter is a mock of PriceGetter interface.
type MockPriceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPriceGetterMockRecorder
}

// MockPriceGetterMockRecorder is the mock recorder for MockPriceGetter.
type MockPriceGetterMockRecorder struct {
	mock *MockPriceGetter
}

// NewMockPriceGetter creates a new mock instance.
func NewMockPriceGetter(ctrl *gomock.Controller) *MockPriceGetter {
	mock := &MockPriceGetter{ctrl: ctrl}
	mock.recorder = &MockPriceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceGetter) EXPECT() *MockPriceGetterMockRecorder {
	return m.recorder
}

// GetPurchasePrice mocks base method.
func (m *MockPriceGetter) GetPurchasePrice(nomenclUUID string) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasePrice", nomenclUUID)
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetPurchasePrice indicates an expected call of GetPurchasePrice.
func (mr *MockPriceGetterMockRecorder) GetPurchasePrice(nomenclUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasePrice", reflect.TypeOf((*MockPriceGetter)(nil).GetPurchasePrice), nomenclUUID)
}

// GetSalePrice mocks base method.
func (m *MockPriceGetter) GetSalePrice(regionID uint, nomenclUUID string) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalePrice", regionID, nomenclUUID)
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetSalePrice indicates an expected call of GetSalePrice.
func (mr *MockPriceGetterMockRecorder) GetSalePrice(regionID, nomenclUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalePrice", reflect.TypeOf((*MockPriceGetter)(nil).GetSalePrice), regionID, nomenclUUID)
}
